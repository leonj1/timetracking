This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-12T01:11:08.451Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
.repomixignore
activity_details.html
activity_details.js
activity_list.html
activity_list.js
add_activity.html
add_activity.js
holidays.js
manifest.json
package.json
people.html
people.js
popup.html
popup.js
README.md
reasons.html
reasons.js
set_date.html
set_date.js
styles.css
teams.html
teams.js
yearly_activities.html
yearly_activities.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
.aider*
node_modules/*

================
File: .repomixignore
================
node_modules
venv
.aider*

================
File: activity_details.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Activity Details</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body class="bg-gray-100 p-4 text-gray-900">
    <div class="max-w-3xl mx-auto">
        <button id="backButton" class="btn btn-secondary mb-4">Back to Dashboard</button>
        <h1 id="activityTitle" class="text-2xl font-bold mb-4"></h1>
        <table id="activityTable" class="w-full bg-white shadow-md rounded mb-4">
            <thead>
                <tr>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Team</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Person</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Days</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Start</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">End</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Reason</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Delete</th>
                </tr>
            </thead>
            <tbody class="text-center"></tbody>
        </table>
    </div>
    <script src="activity_details.js"></script>
</body>
</html>

================
File: activity_details.js
================
document.addEventListener('DOMContentLoaded', function() {
    const backButton = document.getElementById('backButton');
    const activityTitle = document.getElementById('activityTitle');
    const activityTable = document.getElementById('activityTable').getElementsByTagName('tbody')[0];

    const urlParams = new URLSearchParams(window.location.search);
    const month = parseInt(urlParams.get('month'));
    const year = parseInt(urlParams.get('year'));

    const monthName = new Date(year, month).toLocaleString('default', { month: 'long' });
    activityTitle.textContent = `Activity Details for ${monthName} ${year}`;

    backButton.addEventListener('click', function() {
        window.location.href = 'popup.html';
    });

    function renderActivityDetails() {
        const people = JSON.parse(localStorage.getItem('people')) || [];
        activityTable.innerHTML = ''; // Clear existing rows
        const activityData = people
            .flatMap(person => 
                (person.activities || []).map(activity => ({
                    ...activity,
                    team: person.team,
                    name: person.name
                }))
            )
            .filter(activity => {
                const startDate = new Date(activity.startDate);
                return startDate.getMonth() === month && startDate.getFullYear() === year;
            })
            .sort((a, b) => new Date(a.startDate) - new Date(b.startDate));

        activityData.forEach((activity, index) => {
            const row = activityTable.insertRow();
            const cells = [
                activity.team,
                activity.name,
                calculateDays(activity),
                formatDate(new Date(activity.startDate)),
                activity.endDate ? formatDate(new Date(activity.endDate)) : 'N/A',
                activity.reason || 'N/A'
            ];

            cells.forEach((cellContent, cellIndex) => {
                const cell = row.insertCell(cellIndex);
                cell.textContent = cellContent;
                cell.classList.add('text-center');
            });

            // Add delete button
            const deleteCell = row.insertCell();
            deleteCell.classList.add('text-center');
            const deleteButton = document.createElement('button');
            deleteButton.innerHTML = '🗑️';
            deleteButton.className = 'delete-activity btn btn-small btn-danger';
            deleteButton.dataset.index = index;
            deleteCell.appendChild(deleteButton);

            function calculateDays(activity) {
                const startDate = new Date(activity.startDate);
                const endDate = activity.endDate ? new Date(activity.endDate) : null;
                return endDate ? Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1 : 1;
            }

            function formatDate(date) {
                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                return `${months[date.getMonth()]} ${date.getDate()}`;
            }
        });
    }

    renderActivityDetails();

    activityTable.addEventListener('click', function(e) {
        if (e.target.classList.contains('edit-activity')) {
            const index = e.target.dataset.index;
            const activity = activityData[index];
            
            const newStartDate = prompt('Enter new start date (YYYY-MM-DD):', activity.startDate);
            const newEndDate = prompt('Enter new end date (YYYY-MM-DD), or leave empty if no end date:', activity.endDate || '');
            const newReason = prompt('Enter new reason:', activity.reason);

            if (newStartDate && newReason) {
                const person = people.find(p => p.name === activity.name && p.team === activity.team);
                const activityIndex = person.activities.findIndex(a => 
                    a.startDate === activity.startDate && 
                    a.endDate === activity.endDate && 
                    a.reason === activity.reason
                );

                if (activityIndex !== -1) {
                    person.activities[activityIndex] = {
                        startDate: newStartDate,
                        endDate: newEndDate || null,
                        reason: newReason
                    };

                    localStorage.setItem('people', JSON.stringify(people));
                    renderActivityDetails();
                }
            }
        }
    });
});

================
File: activity_list.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Activity List</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body class="bg-gray-100 p-4 text-gray-900">
    <div class="max-w-lg mx-auto">
        <button id="backButton" class="btn btn-secondary mb-4">Back to Manage Activities</button>
        <h1 class="text-2xl font-bold mb-4">Activity List</h1>
        <div id="personInfo" class="mb-4"></div>
        <div id="activitiesList" class="mb-4"></div>
    </div>
    <script src="activity_list.js"></script>
</body>
</html>

================
File: activity_list.js
================
document.addEventListener('DOMContentLoaded', function() {
    const backButton = document.getElementById('backButton');
    const personInfo = document.getElementById('personInfo');
    const activitiesList = document.getElementById('activitiesList');

    const urlParams = new URLSearchParams(window.location.search);
    const personIndex = urlParams.get('index');

    let people = JSON.parse(localStorage.getItem('people')) || [];
    const person = people[personIndex];

    if (!person) {
        alert('Person not found');
        window.location.href = 'set_date.html';
        return;
    }

    personInfo.textContent = `Activities for: ${person.name} (${person.team})`;

    function showBanner(message) {
        const banner = document.createElement('div');
        banner.textContent = message;
        banner.className = 'fixed top-0 left-0 right-0 bg-blue-500 text-white p-2 text-center';
        document.body.prepend(banner);
        setTimeout(() => {
            banner.remove();
        }, 3000);
    }

    function renderActivities() {
        activitiesList.innerHTML = '';
        if (!person.activities || person.activities.length === 0) {
            activitiesList.innerHTML = '<p>No activities yet.</p>';
            return;
        }
        person.activities.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));
        person.activities.forEach((activity, index) => {
            const activityElement = document.createElement('div');
            activityElement.className = 'bg-white p-2 mb-2 rounded flex justify-between items-center';
            const formatDate = (dateString) => {
                if (!dateString) return 'N/A';
                const date = new Date(dateString);
                return `${date.toLocaleString('default', { month: 'short' })} ${date.getDate()}`;
            };
            activityElement.innerHTML = `
                <span>${formatDate(activity.startDate)} to ${formatDate(activity.endDate)}: ${activity.reason}</span>
                <button class="delete-activity btn btn-small btn-danger" data-index="${index}" title="Delete">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                </button>
            `;
            activitiesList.appendChild(activityElement);
        });
    }

    activitiesList.addEventListener('click', function(e) {
        if (e.target.classList.contains('delete-activity')) {
            const index = e.target.dataset.index;
            if (confirm('Are you sure you want to delete this activity?')) {
                alert('Deleting');
                showBanner('Deleting...');
                setTimeout(() => {
                    person.activities.splice(index, 1);
                    localStorage.setItem('people', JSON.stringify(people));
                    renderActivities();
                }, 500);
            }
        }
    });

    backButton.addEventListener('click', function() {
        window.location.href = `set_date.html?index=${personIndex}`;
    });

    renderActivities();
});

================
File: add_activity.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Activity</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body class="bg-gray-100 p-4 text-gray-900">
    <div class="max-w-lg mx-auto">
        <button id="backButton" class="btn btn-secondary mb-4">Back to Manage Activities</button>
        <h1 class="text-2xl font-bold mb-4">Add Activity</h1>
        <div id="personInfo" class="mb-4"></div>
        <form id="activityForm" class="bg-white p-4 rounded shadow">
            <div class="mb-4">
                <label for="startDate" class="block mb-2">Start Date:</label>
                <input type="date" id="startDate" name="startDate" class="w-full p-2 border rounded" required>
            </div>
            <div class="mb-4">
                <label for="endDate" class="block mb-2">End Date (optional):</label>
                <input type="date" id="endDate" name="endDate" class="w-full p-2 border rounded">
            </div>
            <div class="mb-4">
                <label for="reason" class="block mb-2">Reason:</label>
                <select id="reason" name="reason" class="w-full p-2 border rounded" required>
                    <option value="">Select a reason</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary w-full">Add Activity</button>
        </form>
    </div>
    <script src="add_activity.js"></script>
</body>
</html>

================
File: add_activity.js
================
document.addEventListener('DOMContentLoaded', function() {
    const backButton = document.getElementById('backButton');
    const personInfo = document.getElementById('personInfo');
    const activityForm = document.getElementById('activityForm');

    const urlParams = new URLSearchParams(window.location.search);
    const personIndex = urlParams.get('index');

    let people = JSON.parse(localStorage.getItem('people')) || [];
    let reasons = JSON.parse(localStorage.getItem('reasons')) || [];
    const person = people[personIndex];

    if (!person) {
        alert('Person not found');
        window.location.href = 'set_date.html';
        return;
    }

    personInfo.textContent = `Adding activity for: ${person.name} (${person.team})`;

    backButton.addEventListener('click', function() {
        window.location.href = `set_date.html?index=${personIndex}`;
    });

    activityForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const reason = document.getElementById('reason').value;

        if (!reason) {
            alert('Please enter a reason');
            return;
        }

        if (!person.activities) {
            person.activities = [];
        }

        person.activities.push({
            startDate: startDate,
            endDate: endDate || null,
            reason: reason
        });

        localStorage.setItem('people', JSON.stringify(people));

        alert('Activity added successfully');
        window.location.href = `set_date.html?index=${personIndex}`;
    });

    // Set end date to same month and year as start date
    document.getElementById('startDate').addEventListener('change', function() {
        const startDate = new Date(this.value);
        const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);
        document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
    });

    // Populate reason dropdown
    const reasonSelect = document.getElementById('reason');
    function populateReasonSelect() {
        reasonSelect.innerHTML = '<option value="">Select a reason</option>';
        reasons.forEach((reason) => {
            const option = document.createElement('option');
            option.value = reason;
            option.textContent = reason;
            reasonSelect.appendChild(option);
        });
    }
    populateReasonSelect();
});

================
File: holidays.js
================
// This file is intentionally left empty as holidays are now fetched from the Nager.Date API

================
File: manifest.json
================
{
  "manifest_version": 3,
  "name": "Team Manager Extension",
  "version": "1.2",
  "description": "An extension to manage teams, people, and activities with import/export functionality.",
  "action": {
    "default_popup": "popup.html"
  },
  "permissions": ["storage", "unlimitedStorage"],
  "content_security_policy": {
    "extension_pages": "script-src 'self'; object-src 'self'"
  },
  "web_accessible_resources": [
    {
      "resources": ["teams.html", "people.html", "set_date.html", "activity_details.html", "yearly_activities.html", "reasons.html"],
      "matches": ["<all_urls>"]
    }
  ]
}

================
File: package.json
================
{
  "dependencies": {
    "repomix": "^0.2.2"
  }
}

================
File: people.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage People</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body class="bg-gray-100 p-4 text-gray-900">
    <div class="max-w-sm mx-auto">
        <div class="flex justify-between items-center mb-4">
            <button id="backButton" class="btn btn-secondary">Back to Home</button>
            <button id="showAddPersonFormButton" class="btn btn-primary">Add Person</button>
        </div>
        <h1 class="text-2xl font-bold mb-4">Manage People</h1>
        <div id="peopleList"></div>
        <div id="addPersonForm" class="bg-white p-4 rounded shadow mt-4 hidden">
            <input type="text" id="personName" placeholder="Enter person name" class="w-full p-2 mb-2 border rounded">
            <select id="teamSelect" class="w-full p-2 mb-2 border rounded">
                <option value="">Select a team</option>
            </select>
            <button id="addPersonButton" class="btn btn-primary w-full mb-2">Add New Person</button>
            <button id="hideAddPersonFormButton" class="btn btn-secondary w-full">Cancel</button>
        </div>
    </div>

    <!-- Template for editing a person -->
    <template id="edit-person-template">
        <div class="edit-person-page">
            <h2 class="text-xl font-bold mb-4">Edit Person</h2>
            <form id="editPersonForm">
                <div class="mb-4">
                    <label for="editPersonName" class="block text-sm font-medium text-gray-700">Name</label>
                    <input type="text" id="editPersonName" name="name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                </div>
                <div class="mb-4">
                    <label for="editPersonTeam" class="block text-sm font-medium text-gray-700">Team</label>
                    <select id="editPersonTeam" name="team" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                    </select>
                </div>
                <div class="flex justify-between">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <button type="button" id="cancelEditPerson" class="btn btn-secondary">Cancel</button>
                </div>
            </form>
        </div>
    </template>

    <script src="people.js"></script>
</body>
</html>

================
File: people.js
================
document.addEventListener('DOMContentLoaded', function() {
    const backButton = document.getElementById('backButton');
    const peopleList = document.getElementById('peopleList');
    const addPersonButton = document.getElementById('addPersonButton');
    const showAddPersonFormButton = document.getElementById('showAddPersonFormButton');
    const addPersonForm = document.getElementById('addPersonForm');
    const editPersonTemplate = document.getElementById('edit-person-template');

    let people = JSON.parse(localStorage.getItem('people')) || [];
    let teams = JSON.parse(localStorage.getItem('teams')) || [];

    showAddPersonFormButton.addEventListener('click', function() {
        addPersonForm.classList.remove('hidden');
        showAddPersonFormButton.classList.add('hidden');
    });

    const hideAddPersonFormButton = document.getElementById('hideAddPersonFormButton');
    hideAddPersonFormButton.addEventListener('click', function() {
        addPersonForm.classList.add('hidden');
        showAddPersonFormButton.classList.remove('hidden');
    });

    function renderPeople() {
        peopleList.innerHTML = '';
        people.forEach((person, index) => {
            const personElement = document.createElement('div');
            personElement.className = 'flex items-center justify-between bg-white p-2 mb-2 rounded';
            personElement.innerHTML = `
                <span>${person.name} (${person.team})</span>
                <div>
                    <button class="view-person-activities btn btn-small btn-primary" data-index="${index}">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            `;
            peopleList.appendChild(personElement);
        });
    }

    function savePeople() {
        localStorage.setItem('people', JSON.stringify(people));
    }

    const personNameInput = document.getElementById('personName');
    const teamSelect = document.getElementById('teamSelect');

    function populateTeamSelect(selectElement) {
        selectElement.innerHTML = '<option value="">Select a team</option>';
        teams.forEach((team) => {
            const option = document.createElement('option');
            option.value = team;
            option.textContent = team;
            selectElement.appendChild(option);
        });
    }

    function addPerson() {
        const name = personNameInput.value.trim();
        const selectedTeam = teamSelect.value;

        if (!name || !selectedTeam) {
            alert('Please enter a name and select a team');
            return;
        }

        const newPerson = { 
            id: Date.now().toString(), 
            name, 
            team: selectedTeam 
        };
        people.push(newPerson);

        savePeople();
        renderPeople();
        personNameInput.value = '';
        teamSelect.value = '';
    }

    function showEditPersonPage(index) {
        const person = people[index];
        const editPage = editPersonTemplate.content.cloneNode(true);
        
        const nameInput = editPage.querySelector('#editPersonName');
        const teamSelect = editPage.querySelector('#editPersonTeam');
        const form = editPage.querySelector('#editPersonForm');
        
        nameInput.value = person.name;
        populateTeamSelect(teamSelect);
        teamSelect.value = person.team;
        
        form.dataset.personIndex = index;
        
        document.body.innerHTML = '';
        document.body.appendChild(editPage);
    }

    function saveEditedPerson(event) {
        event.preventDefault();
        const form = event.target;
        const index = parseInt(form.dataset.personIndex);
        const nameInput = form.querySelector('#editPersonName');
        const teamSelect = form.querySelector('#editPersonTeam');
        
        const name = nameInput.value.trim();
        const selectedTeam = teamSelect.value;

        if (!name || !selectedTeam) {
            alert('Please enter a name and select a team');
            return;
        }

        people[index].name = name;
        people[index].team = selectedTeam;

        savePeople();
        window.location.reload();
    }

    backButton.addEventListener('click', function() {
        window.location.href = 'popup.html';
    });

    addPersonButton.addEventListener('click', addPerson);

    populateTeamSelect(teamSelect);

    peopleList.addEventListener('click', function(e) {
        if (e.target.closest('.view-person-activities')) {
            const index = e.target.closest('.view-person-activities').dataset.index;
            window.location.href = `set_date.html?index=${index}`;
        } else if (e.target.classList.contains('edit-person')) {
            const index = e.target.dataset.index;
            showEditPersonPage(index);
        } else if (e.target.classList.contains('delete-person')) {
            const index = e.target.dataset.index;
            if (confirm('Are you sure you want to delete this person?')) {
                people.splice(index, 1);
                savePeople();
                renderPeople();
            }
        }
    });

    document.addEventListener('submit', function(e) {
        if (e.target.id === 'editPersonForm') {
            saveEditedPerson(e);
        }
    });

    document.addEventListener('click', function(e) {
        if (e.target.id === 'cancelEditPerson') {
            window.location.reload();
        }
    });

    renderPeople();
});

================
File: popup.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Team Manager Extension</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <style>
        #activityGridContainer > div {
            margin-bottom: 0.125rem;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-900">
    <header class="bg-white dark:bg-gray-800 shadow-md p-4 mb-4 flex justify-between items-center">
        <h1 class="text-xl font-bold dark:text-white">Team Manager</h1>
        <div class="flex space-x-2 items-center">
            <button id="exportButton" class="btn btn-primary flex items-center justify-center" title="Export Data">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
            </button>
            <button id="importButton" class="btn btn-primary flex items-center justify-center" title="Import Data">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
            <button id="manageTeamsButton" class="btn btn-primary flex items-center justify-center" title="Manage Teams">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" />
                </svg>
            </button>
            <button id="managePeopleButton" class="btn btn-primary flex items-center justify-center" title="Manage People">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                </svg>
            </button>
            <button id="manageReasonsButton" class="btn btn-primary flex items-center justify-center" title="Manage Reasons">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>
    </header>
    <main class="p-4">
        <h2 class="text-xl font-bold mb-2">Time off</h2>
        <div id="activityGridContainer"></div>
        <button id="viewHolidaysButton" class="btn btn-primary mt-6">View Upcoming Holidays</button>
        <div id="upcomingHolidays" class="bg-white shadow-md rounded p-4 mt-4 hidden"></div>
    </main>
    <script src="popup.js"></script>
</body>
</html>

<!-- New page for editing a person -->
<template id="edit-person-template">
    <div class="edit-person-page">
        <h2 class="text-xl font-bold mb-4">Edit Person</h2>
        <form id="editPersonForm">
            <div class="mb-4">
                <label for="editPersonName" class="block text-sm font-medium text-gray-700">Name</label>
                <input type="text" id="editPersonName" name="name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
            </div>
            <div class="mb-4">
                <label for="editPersonTeam" class="block text-sm font-medium text-gray-700">Team</label>
                <select id="editPersonTeam" name="team" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                </select>
            </div>
            <div class="flex justify-between">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <button type="button" id="cancelEditPerson" class="btn btn-secondary">Cancel</button>
            </div>
        </form>
    </div>
</template>

================
File: popup.js
================
function log(message) {
    console.log(`[${new Date().toISOString()}] ${message}`);
}

document.addEventListener('DOMContentLoaded', async function() {
    log('DOM content loaded');
    const manageTeamsButton = document.getElementById('manageTeamsButton');
    const managePeopleButton = document.getElementById('managePeopleButton');
    const exportButton = document.getElementById('exportButton');
    const importButton = document.getElementById('importButton');
    const activityGrid = document.getElementById('activityGrid');

    manageTeamsButton.addEventListener('click', function() {
        window.location.href = 'teams.html';
    });

    managePeopleButton.addEventListener('click', function() {
        window.location.href = 'people.html';
    });

    const manageReasonsButton = document.getElementById('manageReasonsButton');
    manageReasonsButton.addEventListener('click', function() {
        window.location.href = 'reasons.html';
    });

    exportButton.addEventListener('click', exportData);
    importButton.addEventListener('click', importData);

    await fetchHolidays();

    const viewHolidaysButton = document.getElementById('viewHolidaysButton');
    viewHolidaysButton.addEventListener('click', function() {
        const upcomingHolidays = document.getElementById('upcomingHolidays');
        if (upcomingHolidays.classList.contains('hidden')) {
            renderUpcomingHolidays();
            upcomingHolidays.classList.remove('hidden');
            viewHolidaysButton.textContent = 'Hide Upcoming Holidays';
        } else {
            upcomingHolidays.classList.add('hidden');
            viewHolidaysButton.textContent = 'View Upcoming Holidays';
        }
    });

    renderUpcomingActivities();

    // Add event listener for edit person links
    document.addEventListener('click', function(e) {
        if (e.target && e.target.classList.contains('edit-person')) {
            e.preventDefault();
            const personId = e.target.dataset.id;
            showEditPersonPage(personId);
        }
    });

    // Add event listener for cancel edit person button
    document.addEventListener('click', function(e) {
        if (e.target && e.target.id === 'cancelEditPerson') {
            hideEditPersonPage();
        }
    });

    // Add event listener for edit person form submission
    document.addEventListener('submit', function(e) {
        if (e.target && e.target.id === 'editPersonForm') {
            e.preventDefault();
            saveEditedPerson();
        }
    });

    function exportData() {
        log('Exporting data');
        const data = {
            people: JSON.parse(localStorage.getItem('people') || '[]'),
            teams: JSON.parse(localStorage.getItem('teams') || '[]'),
            holidays: JSON.parse(localStorage.getItem('holidays') || '[]')
        };
        log('Data prepared for export');
        const blob = new Blob([JSON.stringify(data, null, 2)], {type: 'application/json'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'team_manager_data.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    function importData() {
        log('Importing data');
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.onchange = (event) => {
            log('File selected for import');
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const data = JSON.parse(e.target.result);
                    localStorage.setItem('people', JSON.stringify(data.people || []));
                    localStorage.setItem('teams', JSON.stringify(data.teams || []));
                    localStorage.setItem('holidays', JSON.stringify(data.holidays || []));
                    alert('Data imported successfully!');
                    location.reload();
                } catch (error) {
                    alert('Error importing data. Please check the file format.');
                }
            };
            reader.readAsText(file);
        };
        input.click();
    }

    function createActivityGrids() {
        log('Creating activity grids');
        const people = JSON.parse(localStorage.getItem('people')) || [];
        const activityYears = new Set();
        const activityGridContainer = document.getElementById('activityGridContainer');
        activityGridContainer.innerHTML = '';
        log('Activity grid container cleared');

        const currentYear = new Date().getFullYear();
        const relevantYears = [currentYear - 1, currentYear, currentYear + 1];

        // Collect relevant years with activities
        people.forEach(person => {
            (person.activities || []).forEach(activity => {
                if (activity.startDate) {
                    const startDate = new Date(activity.startDate);
                    const year = startDate.getFullYear();
                    if (relevantYears.includes(year)) {
                        activityYears.add(year);
                    }
                }
            });
        });

        // Sort years in ascending order
        const sortedYears = Array.from(activityYears).sort((a, b) => a - b);

        sortedYears.forEach(year => {
            const monthlyActivity = new Array(12).fill(0);

            const monthlyActivityPeople = new Array(12).fill().map(() => new Set());

            people.forEach(person => {
                (person.activities || []).forEach(activity => {
                    if (activity.startDate) {
                        const startDate = new Date(activity.startDate);
                        if (startDate.getFullYear() === year) {
                            monthlyActivityPeople[startDate.getMonth()].add(person.name);
                        }
                    }
                });
            });

            const maxActivity = Math.max(...monthlyActivityPeople.map(set => set.size));

            const gridContainer = document.createElement('div');
            gridContainer.className = 'mb-4 flex items-center';
            const yearLink = document.createElement('a');
            yearLink.className = 'text-sm text-blue-600 mr-2 hover:underline';
            yearLink.textContent = year;
            yearLink.href = `yearly_activities.html?year=${year}`;
            gridContainer.appendChild(yearLink);

            const grid = document.createElement('div');
            grid.className = 'grid grid-cols-12 gap-0 flex-grow';

            for (let i = 0; i < 12; i++) {
                const cell = document.createElement('div');
                cell.className = 'h-8 w-8 rounded cursor-pointer';
                const intensity = monthlyActivityPeople[i].size / maxActivity;
                const color = getColorForIntensity(intensity);
                cell.style.backgroundColor = color;
                const peopleNames = Array.from(monthlyActivityPeople[i]).sort();
                const monthName = new Date(year, i).toLocaleString('default', { month: 'long' });
                cell.dataset.month = i;
                cell.dataset.year = year;

                // Add border to current month in current year
                const currentDate = new Date();
                if (year === currentDate.getFullYear() && i === currentDate.getMonth()) {
                    cell.style.border = '2px solid #000000';
                }
                cell.addEventListener('click', () => {
                    window.location.href = `activity_details.html?month=${i}&year=${year}`;
                });
                cell.addEventListener('mouseover', (event) => {
                    showModal(event, peopleNames, monthName, year);
                });
                cell.addEventListener('mouseout', hideModal);
                grid.appendChild(cell);
            }

            gridContainer.appendChild(grid);
            activityGridContainer.appendChild(gridContainer);
        });
    }

    function getColorForIntensity(intensity) {
        const r = Math.round(144 + (39 - 144) * intensity);
        const g = Math.round(198 + (111 - 198) * intensity);
        const b = Math.round(144 + (255 - 144) * intensity);
        return `rgb(${r}, ${g}, ${b})`;
    }

    createActivityGrids();
    renderUpcomingHolidays();
});

function showModal(event, peopleNames, monthName, year) {
    const modal = document.createElement('div');
    modal.className = 'fixed bg-white border border-gray-300 rounded p-2 shadow-lg z-50';
    
    document.body.appendChild(modal);

    const title = document.createElement('h3');
    title.className = 'font-bold mb-2';
    title.textContent = `${monthName} ${year}`;
    modal.appendChild(title);

    const list = document.createElement('ul');
    list.className = 'list-disc pl-5';
    peopleNames.forEach(name => {
        const item = document.createElement('li');
        item.textContent = name;
        list.appendChild(item);
    });
    modal.appendChild(list);

    const rect = modal.getBoundingClientRect();
    const viewportWidth = window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight = window.innerHeight || document.documentElement.clientHeight;

    let left = event.pageX + 10;
    let top = event.pageY + 10;

    if (left + rect.width > viewportWidth) {
        left = viewportWidth - rect.width - 10;
    }

    if (top + rect.height > viewportHeight) {
        top = viewportHeight - rect.height - 10;
    }

    modal.style.left = `${left}px`;
    modal.style.top = `${top}px`;
}

function hideModal() {
    const modal = document.querySelector('.fixed.bg-white');
    if (modal) {
        modal.remove();
    }
}

function showEditPersonPage(personId) {
    const people = JSON.parse(localStorage.getItem('people')) || [];
    const person = people.find(p => p.id === personId);
    if (!person) return;

    const template = document.getElementById('edit-person-template');
    const editPage = template.content.cloneNode(true);

    const nameInput = editPage.querySelector('#editPersonName');
    const teamSelect = editPage.querySelector('#editPersonTeam');

    nameInput.value = person.name;

    // Populate team options
    const teams = JSON.parse(localStorage.getItem('teams')) || [];
    teams.forEach(team => {
        const option = document.createElement('option');
        option.value = team;
        option.textContent = team;
        if (team === person.team) {
            option.selected = true;
        }
        teamSelect.appendChild(option);
    });

    // Set person ID as a data attribute on the form
    const form = editPage.querySelector('#editPersonForm');
    form.dataset.personId = personId;

    // Replace main content with edit page
    const main = document.querySelector('main');
    main.innerHTML = '';
    main.appendChild(editPage);
}

function hideEditPersonPage() {
    window.location.href = 'people.html';
}

function saveEditedPerson() {
    const form = document.getElementById('editPersonForm');
    const personId = form.dataset.personId;
    const newName = document.getElementById('editPersonName').value;
    const newTeam = document.getElementById('editPersonTeam').value;

    const people = JSON.parse(localStorage.getItem('people')) || [];
    const personIndex = people.findIndex(p => p.id === personId);

    if (personIndex !== -1) {
        people[personIndex].name = newName;
        people[personIndex].team = newTeam;
        localStorage.setItem('people', JSON.stringify(people));
        alert('Person updated successfully!');
        window.location.href = 'people.html';
    } else {
        alert('Error: Person not found');
    }
}

async function fetchHolidays() {
    log('Fetching holidays');
    const countries = ['US', 'GB', 'IN', 'CR'];
    const year = new Date().getFullYear();
    const holidays = [];

    for (const country of countries) {
        try {
            const response = await fetch(`https://date.nager.at/api/v3/PublicHolidays/${year}/${country}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const text = await response.text();
            log(`Response for ${country}: ${text}`);
            let data;
            try {
                data = JSON.parse(text);
            } catch (parseError) {
                console.error(`Error parsing JSON for ${country}:`, parseError);
                console.log('Response text:', text);
                continue;
            }
            if (Array.isArray(data)) {
                holidays.push(...data.map(holiday => ({
                    date: holiday.date,
                    name: holiday.name,
                    country: country
                })));
            } else {
                console.error(`Unexpected data format for ${country}:`, data);
            }
        } catch (error) {
            console.error(`Error fetching holidays for ${country}:`, error);
        }
    }

    log(`Total holidays fetched: ${holidays.length}`);
    localStorage.setItem('holidays', JSON.stringify(holidays));
}

function getCountryFlag(country) {
    const flags = {
        'US': '🇺🇸',
        'GB': '🇬🇧',
        'IN': '🇮🇳',
        'CR': '🇨🇷'
    };
    return flags[country] || '';
}

function renderUpcomingHolidays() {
    log('Rendering upcoming holidays');
    const upcomingHolidaysContainer = document.getElementById('upcomingHolidays');
    const today = new Date();
    const sixMonthsLater = new Date(today.getFullYear(), today.getMonth() + 6, today.getDate());

    const holidays = JSON.parse(localStorage.getItem('holidays')) || [];

    const upcomingHolidays = holidays.filter(holiday => {
        const holidayDate = new Date(holiday.date);
        return holidayDate >= today && holidayDate <= sixMonthsLater;
    }).sort((a, b) => new Date(a.date) - new Date(b.date));

    const holidayTable = upcomingHolidays.map(holiday => {
        const date = new Date(holiday.date);
        const formattedDate = `${date.toLocaleString('default', { month: 'short' })} ${date.getDate()}`;
        const flag = getCountryFlag(holiday.country);
        return `<tr>
            <td class="text-center w-8">${flag}</td>
            <td class="text-left w-24">${formattedDate}</td>
            <td class="text-left">${holiday.name} (${holiday.country})</td>
        </tr>`;
    }).join('');

    upcomingHolidaysContainer.innerHTML = `
        <table class="w-full">
            <thead>
                <tr>
                    <th class="w-8"></th>
                    <th class="w-24 text-left">Date</th>
                    <th class="text-center">Holiday</th>
                </tr>
            </thead>
            <tbody>${holidayTable}</tbody>
        </table>`;
}

function renderUpcomingActivities() {
    log('Rendering upcoming activities');
    const upcomingActivitiesContainer = document.createElement('div');
    upcomingActivitiesContainer.id = 'upcomingActivities';
    upcomingActivitiesContainer.className = 'mt-4';

    const today = new Date();
    const thirtyDaysLater = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30);

    const people = JSON.parse(localStorage.getItem('people')) || [];

    const upcomingActivities = people.flatMap(person => 
        (person.activities || []).map(activity => ({
            ...activity,
            name: person.name,
            team: person.team
        }))
    ).filter(activity => {
        const startDate = new Date(activity.startDate);
        return startDate >= today && startDate <= thirtyDaysLater;
    }).sort((a, b) => new Date(a.startDate) - new Date(b.startDate));

    if (upcomingActivities.length > 0) {
        const activityTable = upcomingActivities.map(activity => {
            const startDate = new Date(activity.startDate);
            const formattedDate = `${startDate.toLocaleString('default', { month: 'short' })} ${startDate.getDate()}`;
            return `<tr>
                <td class="text-left w-24">${formattedDate}</td>
                <td class="text-left">${activity.name} (${activity.team})</td>
                <td class="text-left">${activity.reason || 'N/A'}</td>
            </tr>`;
        }).join('');

        upcomingActivitiesContainer.innerHTML = `
            <h2 class="text-xl font-bold mb-2">Upcoming Activities (Next 30 Days)</h2>
            <table class="w-full">
                <thead>
                    <tr>
                        <th class="w-24 text-left">Date</th>
                        <th class="text-left">Person (Team)</th>
                        <th class="text-left">Reason</th>
                    </tr>
                </thead>
                <tbody>${activityTable}</tbody>
            </table>`;

        const upcomingHolidaysContainer = document.getElementById('upcomingHolidays');
        upcomingHolidaysContainer.parentNode.insertBefore(upcomingActivitiesContainer, upcomingHolidaysContainer.nextSibling);
    }
}

================
File: README.md
================
# Team Manager Extension

<img src="screenshot.png" alt="Team Manager Extension Screenshot" width="300">

## Purpose

The Team Manager Extension is a browser extension designed to help teams manage their members' activities, time off, and holidays. It provides an easy-to-use interface for tracking and visualizing team activities across different time periods.

Key features include:
- Managing teams and team members
- Recording and viewing time off and activities for team members
- Visualizing team activities in a yearly grid view
- Tracking upcoming holidays for multiple countries
- Importing and exporting data for backup and transfer

## Installation

To install the Team Manager Extension:

1. Clone this repository or download the source code.
2. Open your browser's extension management page:
   - For Chrome: Navigate to `chrome://extensions/`
   - For Firefox: Navigate to `about:addons`
   - For Edge: Navigate to `edge://extensions/`
3. Enable "Developer mode" (usually a toggle switch in the top right corner).
4. Click on "Load unpacked" or "Load temporary add-on".
5. Navigate to the directory containing the extension files and select it.

The Team Manager Extension should now be installed and visible in your browser's toolbar.

## Usage

Click on the extension icon in your browser toolbar to open the main interface. From there, you can:
- Manage teams and people
- Add and view activities
- See the activity grid visualization
- View upcoming holidays
- Import and export data

For detailed usage instructions, please refer to the in-app tooltips and prompts.

## Contributing

Contributions to the Team Manager Extension are welcome! Please feel free to submit pull requests or create issues for bugs and feature requests.

## License

This project is licensed under the MIT License.

================
File: reasons.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Reasons</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body class="bg-gray-100 p-4 text-gray-900">
    <div class="max-w-sm mx-auto">
        <button id="backButton" class="btn btn-secondary mb-4">Back to Home</button>
        <h1 class="text-2xl font-bold mb-4">Manage Reasons</h1>
        <div id="reasonsList"></div>
        <div id="addReasonForm" class="bg-white p-4 rounded shadow mt-4">
            <input type="text" id="reasonInput" placeholder="Enter reason" class="w-full p-2 mb-2 border rounded">
            <button id="addReasonButton" class="btn btn-primary w-full">Add New Reason</button>
        </div>
    </div>
    <script src="reasons.js"></script>
</body>
</html>

================
File: reasons.js
================
document.addEventListener('DOMContentLoaded', function() {
    const backButton = document.getElementById('backButton');
    const reasonsList = document.getElementById('reasonsList');
    const addReasonButton = document.getElementById('addReasonButton');
    const reasonInput = document.getElementById('reasonInput');

    let reasons = JSON.parse(localStorage.getItem('reasons')) || [];

    renderReasons();

    function renderReasons() {
        reasonsList.innerHTML = '';
        reasons.forEach((reason, index) => {
            const reasonElement = document.createElement('div');
            reasonElement.className = 'flex items-center justify-between bg-white p-2 mb-2 rounded';
            reasonElement.innerHTML = `
                <span>${reason}</span>
                <div>
                    <button class="edit-reason btn btn-small btn-secondary mr-2" data-index="${index}">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                        </svg>
                    </button>
                    <button class="delete-reason btn btn-small btn-danger" data-index="${index}">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            `;
            reasonsList.appendChild(reasonElement);
        });
    }

    function saveReasons() {
        localStorage.setItem('reasons', JSON.stringify(reasons));
    }

    function formatReason(reason) {
        return reason.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');
    }

    backButton.addEventListener('click', function() {
        window.location.href = 'popup.html';
    });

    addReasonButton.addEventListener('click', function() {
        const newReason = formatReason(reasonInput.value.trim());
        if (newReason && !reasons.includes(newReason)) {
            reasons.push(newReason);
            saveReasons();
            renderReasons();
            reasonInput.value = '';
        } else if (reasons.includes(newReason)) {
            alert('This reason already exists.');
        } else {
            alert('Please enter a valid reason.');
        }
    });

    reasonsList.addEventListener('click', function(e) {
        if (e.target.closest('.delete-reason')) {
            const index = e.target.closest('.delete-reason').dataset.index;
            if (confirm('Are you sure you want to delete this reason?')) {
                reasons.splice(index, 1);
                saveReasons();
                renderReasons();
            }
        } else if (e.target.closest('.edit-reason')) {
            const index = e.target.closest('.edit-reason').dataset.index;
            const newReason = prompt('Edit reason:', reasons[index]);
            if (newReason !== null && newReason.trim() !== '') {
                reasons[index] = formatReason(newReason);
                saveReasons();
                renderReasons();
            }
        }
    });

    renderReasons();
});

================
File: set_date.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Activities for Person</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body class="bg-gray-100 p-4 text-gray-900">
    <div class="max-w-lg mx-auto">
        <button id="backButton" class="btn btn-secondary mb-4">Back to People</button>
        <h1 class="text-2xl font-bold mb-4">Manage Activities for Person</h1>
        <div id="personInfo" class="mb-4"></div>
        <div class="mb-4 flex">
            <button id="viewActivitiesButton" class="btn btn-secondary mr-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                    <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                </svg>
                View Activities
            </button>
            <button id="addActivityButton" class="btn btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                </svg>
                Add Activity
            </button>
        </div>
        <div id="activitySummary" class="mt-4 bg-white p-4 rounded shadow">
            <h2 class="text-xl font-bold mb-2">Activity Summary</h2>
            <select id="summaryYear" class="w-full p-2 mb-2 border rounded">
            </select>
            <table id="activitySummaryTable" class="w-full">
                <thead>
                    <tr>
                        <th class="text-left">Days</th>
                        <th class="text-left">Reason</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
    <script src="set_date.js"></script>
</body>
</html>

================
File: set_date.js
================
document.addEventListener('DOMContentLoaded', function() {
    const backButton = document.getElementById('backButton');
    const personInfo = document.getElementById('personInfo');
    const activitiesList = document.getElementById('activitiesList');
    const activityForm = document.getElementById('activityForm');
    const summaryYearSelect = document.getElementById('summaryYear');

    const urlParams = new URLSearchParams(window.location.search);
    const personIndex = urlParams.get('index');

    let people = JSON.parse(localStorage.getItem('people')) || [];
    let reasons = JSON.parse(localStorage.getItem('reasons')) || [];
    const person = people[personIndex];

    if (!person) {
        alert('Person not found');
        window.location.href = 'people.html';
        return;
    }

    personInfo.textContent = `Managing activities for: ${person.name} (${person.team})`;

    const viewActivitiesButton = document.getElementById('viewActivitiesButton');
    viewActivitiesButton.addEventListener('click', function() {
        window.location.href = `activity_list.html?index=${personIndex}`;
    });

    backButton.addEventListener('click', function() {
        window.location.href = 'people.html';
    });

    const addActivityButton = document.getElementById('addActivityButton');
    addActivityButton.addEventListener('click', function() {
        window.location.href = `add_activity.html?index=${personIndex}`;
    });

    // Populate summary year dropdown
    function populateSummaryYearSelect() {
        const currentYear = new Date().getFullYear();
        for (let year = currentYear - 2; year <= currentYear + 2; year++) {
            const option = document.createElement('option');
            option.value = year;
            option.textContent = year;
            summaryYearSelect.appendChild(option);
        }
        summaryYearSelect.value = currentYear;
    }
    populateSummaryYearSelect();

    // Add event listener for summary year change
    summaryYearSelect.addEventListener('change', renderActivitySummary);

    renderActivities();
    renderActivitySummary();
});

function renderActivitySummary() {
    const summaryYearSelect = document.getElementById('summaryYear');
    const selectedYear = parseInt(summaryYearSelect.value);
    
    const activitySummary = {};

    if (person && person.activities) {
        person.activities.forEach(activity => {
            const startDate = new Date(activity.startDate);
            const endDate = activity.endDate ? new Date(activity.endDate) : startDate;
            if (startDate.getFullYear() === selectedYear || endDate.getFullYear() === selectedYear) {
                if (!activitySummary[activity.reason]) {
                    activitySummary[activity.reason] = 0;
                }
                activitySummary[activity.reason] += calculateDaysInYear(activity, selectedYear);
            }
        });
    }

    const sortedSummary = Object.entries(activitySummary)
        .sort((a, b) => b[1] - a[1]);

    const activitySummaryTable = document.getElementById('activitySummaryTable').getElementsByTagName('tbody')[0];
    activitySummaryTable.innerHTML = '';

    let totalDays = 0;
    sortedSummary.forEach(([reason, days]) => {
        const row = activitySummaryTable.insertRow();
        const daysCell = row.insertCell(0);
        const reasonCell = row.insertCell(1);
        daysCell.textContent = days;
        reasonCell.textContent = reason;
        totalDays += days;
    });

    // Add total row
    const totalRow = activitySummaryTable.insertRow();
    const totalDaysCell = totalRow.insertCell(0);
    const totalLabelCell = totalRow.insertCell(1);
    totalDaysCell.textContent = totalDays;
    totalLabelCell.textContent = 'Total';
    totalRow.classList.add('font-bold');
}

function calculateDaysInYear(activity, year) {
    const startDate = new Date(activity.startDate);
    const endDate = activity.endDate ? new Date(activity.endDate) : startDate;
    const yearStart = new Date(year, 0, 1);
    const yearEnd = new Date(year, 11, 31);

    const effectiveStart = new Date(Math.max(startDate, yearStart));
    const effectiveEnd = new Date(Math.min(endDate, yearEnd));

    return Math.ceil((effectiveEnd - effectiveStart) / (1000 * 60 * 60 * 24)) + 1;
}

document.addEventListener('DOMContentLoaded', function() {
    // ... (existing code)

    const summaryYearSelect = document.getElementById('summaryYear');
    summaryYearSelect.addEventListener('change', renderActivitySummary);

    // ... (existing code)
});

function calculateDays(activity) {
    const startDate = new Date(activity.startDate);
    const endDate = activity.endDate ? new Date(activity.endDate) : startDate;
    return Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
}

================
File: styles.css
================
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

.btn {
    @apply font-bold py-2 px-4 rounded;
}

.btn-primary {
    @apply bg-blue-500 text-white dark:bg-blue-600 dark:text-gray-200;
}

.btn-primary:hover {
    @apply bg-blue-600 dark:bg-blue-700;
}

.btn-secondary {
    @apply bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-gray-200;
}

.btn-secondary:hover {
    @apply bg-gray-400 dark:bg-gray-700;
}

.btn-danger {
    @apply bg-red-500 text-white dark:bg-red-600 dark:text-gray-200;
}

.btn-danger:hover {
    @apply bg-red-600 dark:bg-red-700;
}

.btn-small {
    @apply py-1 px-2 text-sm;
}

body {
    min-width: 300px;
    min-height: 200px;
}

#activityGridContainer .grid div {
    width: 11px;
    height: 11px;
    margin: 1px;
}

/* Dark mode styles */
.dark body {
    @apply bg-gray-900 text-gray-100;
}

.dark .bg-white {
    @apply bg-gray-800;
}

.dark .text-gray-900 {
    @apply text-gray-100;
}

.dark .shadow-md {
    @apply shadow-gray-700;
}

================
File: teams.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Teams</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body class="bg-gray-100 p-4 text-gray-900">
    <div class="max-w-sm mx-auto">
        <button id="backButton" class="btn btn-secondary mb-4">Back to Home</button>
        <h1 class="text-2xl font-bold mb-4">Manage Teams</h1>
        <div id="teamsList"></div>
        <button id="addTeamButton" class="btn btn-primary w-full mt-4">Add New Team</button>
    </div>
    <script src="teams.js"></script>
</body>
</html>

================
File: teams.js
================
document.addEventListener('DOMContentLoaded', function() {
    const backButton = document.getElementById('backButton');
    const teamsList = document.getElementById('teamsList');
    const addTeamButton = document.getElementById('addTeamButton');

    let teams = JSON.parse(localStorage.getItem('teams')) || [];

    function renderTeams() {
        teamsList.innerHTML = '';
        teams.forEach((team, index) => {
            const teamElement = document.createElement('div');
            teamElement.className = 'flex items-center justify-between bg-white p-2 mb-2 rounded';
            teamElement.innerHTML = `
                <span>${team}</span>
                <div>
                    <button class="edit-team btn btn-small btn-secondary mr-2" data-index="${index}">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                        </svg>
                    </button>
                    <button class="delete-team btn btn-small btn-danger" data-index="${index}">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            `;
            teamsList.appendChild(teamElement);
        });
    }

    function saveTeams() {
        localStorage.setItem('teams', JSON.stringify(teams));
    }

    backButton.addEventListener('click', function() {
        window.location.href = 'popup.html';
    });

    addTeamButton.addEventListener('click', function() {
        const teamName = prompt('Enter new team name:');
        if (teamName) {
            teams.push(teamName);
            saveTeams();
            renderTeams();
        }
    });

    teamsList.addEventListener('click', function(e) {
        if (e.target.classList.contains('edit-team')) {
            const index = e.target.dataset.index;
            const newName = prompt('Enter new team name:', teams[index]);
            if (newName) {
                teams[index] = newName;
                saveTeams();
                renderTeams();
            }
        } else if (e.target.classList.contains('delete-team')) {
            const index = e.target.dataset.index;
            if (confirm('Are you sure you want to delete this team?')) {
                teams.splice(index, 1);
                saveTeams();
                renderTeams();
            }
        }
    });

    renderTeams();
});

================
File: yearly_activities.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yearly Activities</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>
<body class="bg-gray-100 p-4 text-gray-900">
    <div class="max-w-full mx-auto px-4">
        <button id="backButton" class="btn btn-secondary mb-4">Back to Dashboard</button>
        <h1 id="yearTitle" class="text-2xl font-bold mb-4"></h1>
        <table id="activitiesTable" class="w-full bg-white shadow-md rounded mb-4">
            <thead>
                <tr>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Team</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Name</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Days</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Start</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">End</th>
                    <th class="py-2 px-4 bg-gray-200 font-semibold text-gray-700 text-center">Reason</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <script src="yearly_activities.js"></script>
</body>
</html>

================
File: yearly_activities.js
================
document.addEventListener('DOMContentLoaded', function() {
    const backButton = document.getElementById('backButton');
    const yearTitle = document.getElementById('yearTitle');
    const activitiesTable = document.getElementById('activitiesTable').getElementsByTagName('tbody')[0];

    const urlParams = new URLSearchParams(window.location.search);
    const year = parseInt(urlParams.get('year'));

    yearTitle.textContent = `Activities for ${year}`;

    backButton.addEventListener('click', function() {
        window.location.href = 'popup.html';
    });

    function renderActivities() {
        const people = JSON.parse(localStorage.getItem('people')) || [];
        activitiesTable.innerHTML = ''; // Clear existing rows

        const activityData = people
            .flatMap(person => 
                (person.activities || []).map(activity => ({
                    ...activity,
                    team: person.team,
                    name: person.name
                }))
            )
            .filter(activity => {
                const startDate = new Date(activity.startDate);
                return startDate.getFullYear() === year;
            })
            .sort((a, b) => new Date(a.startDate) - new Date(b.startDate));

        activityData.forEach((activity) => {
            const row = activitiesTable.insertRow();
            const cells = [
                activity.team,
                activity.name,
                calculateDays(activity),
                formatDate(new Date(activity.startDate)),
                activity.endDate ? formatDate(new Date(activity.endDate)) : 'N/A',
                activity.reason || 'N/A'
            ];

            cells.forEach((cellContent, index) => {
                const cell = row.insertCell();
                cell.textContent = cellContent;
                cell.classList.add('text-center', 'py-2', 'px-4');
                if (index === 3 || index === 4) { // Start and End date columns
                    cell.classList.add('whitespace-nowrap');
                }
            });
        });
    }

    function calculateDays(activity) {
        const startDate = new Date(activity.startDate);
        const endDate = activity.endDate ? new Date(activity.endDate) : null;
        return endDate ? Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1 : 1;
    }

    function formatDate(date) {
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return `${months[date.getMonth()]} ${date.getDate()}`;
    }

    renderActivities();
});
